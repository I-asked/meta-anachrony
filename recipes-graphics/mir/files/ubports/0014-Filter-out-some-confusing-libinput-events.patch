From 87498aa76cc44bc8d0212ad9c8617680a8d8669d Mon Sep 17 00:00:00 2001
From: Florian Leeber <florian@ubports.com>
Date: Sat, 29 Jan 2022 17:17:22 +0100
Subject: [PATCH 1/4]  Ignore empty touch event telegrams as well as touch-up
 without touch-down

---
 src/platforms/evdev/libinput_device.cpp       | 25 ++++++++++-
 .../input/evdev/test_libinput_device.cpp      | 41 +++++++++++++++++++
 2 files changed, 64 insertions(+), 2 deletions(-)

diff --git a/src/platforms/evdev/libinput_device.cpp b/src/platforms/evdev/libinput_device.cpp
index abaaaa6305..3866a4ac3c 100644
--- a/src/platforms/evdev/libinput_device.cpp
+++ b/src/platforms/evdev/libinput_device.cpp
@@ -177,7 +177,10 @@ void mie::LibInputDevice::process_event(libinput_event* event)
         case LIBINPUT_EVENT_TOUCH_FRAME:
             if (is_output_active())
             {
-                sink->handle_input(convert_touch_frame(libinput_event_get_touch_event(event)));
+                if (auto input = convert_touch_frame(libinput_event_get_touch_event(event)))
+                {
+                    sink->handle_input(std::move(input));
+                }
             }
             break;
         default:
@@ -338,6 +341,18 @@ mir::EventUPtr mie::LibInputDevice::convert_touch_frame(libinput_event_touch* to
             ++it;
     }
 
+    // Sanity check: Bogus panels are sending sometimes empty events that all point
+    // to (0, 0) coordinates. Detect those and drop the whole frame in this case.
+    // Also drop touch frames with no contacts inside
+    int emptyTouches = 0;
+    for_each(begin(contacts), end(contacts), [&](auto const& contact)
+    {
+        if (contact.x == 0 && contact.y == 0)
+            emptyTouches++;
+    });
+    if (contacts.empty() || emptyTouches > 1)
+        return {nullptr, [](auto){}};
+    
     return builder->touch_event(time, contacts);
 }
 
@@ -350,7 +365,13 @@ void mie::LibInputDevice::handle_touch_down(libinput_event_touch* touch)
 void mie::LibInputDevice::handle_touch_up(libinput_event_touch* touch)
 {
     MirTouchId const id = libinput_event_touch_get_slot(touch);
-    last_seen_properties[id].action = mir_touch_action_up;
+
+    //Only update last_seen_properties[].action if there is a valid record in the map
+    //for this ID. Otherwise, an invalid "up" event from a bogus panel will
+    //create a fake action.
+    auto const it = last_seen_properties.find(id);
+    if (it != end(last_seen_properties))
+        (*it).second.action = mir_touch_action_up;
 }
 
 void mie::LibInputDevice::update_contact_data(ContactData & data, MirTouchAction action, libinput_event_touch* touch)
diff --git a/tests/unit-tests/input/evdev/test_libinput_device.cpp b/tests/unit-tests/input/evdev/test_libinput_device.cpp
index 831e692264..58ec64781c 100644
--- a/tests/unit-tests/input/evdev/test_libinput_device.cpp
+++ b/tests/unit-tests/input/evdev/test_libinput_device.cpp
@@ -64,6 +64,7 @@ class StubInputDeviceRegistry : public mi::InputDeviceRegistry
 };
 
 using namespace ::testing;
+using ::testing::_;
 using Matrix = mi::OutputInfo::Matrix;
 
 struct MockEventBuilder : mi::EventBuilder
@@ -544,6 +545,46 @@ TEST_F(LibInputDeviceOnTouchScreen, process_event_handles_touch_down_events)
     process_events(touch_screen);
 }
 
+TEST_F(LibInputDeviceOnTouchScreen, process_event_ignores_uncorrelated_touch_up_events)
+{
+    MirTouchId slot = 3;
+
+    InSequence seq;
+
+    EXPECT_CALL(mock_builder, touch_event(_, _)).Times(0);
+    EXPECT_CALL(mock_sink, handle_input(_)).Times(0);
+
+    touch_screen.start(&mock_sink, &mock_builder);
+    env.mock_libinput.setup_touch_up_event(fake_device, event_time_1, slot);
+    env.mock_libinput.setup_touch_frame(fake_device, event_time_1);
+    process_events(touch_screen);
+}
+
+TEST_F(LibInputDeviceOnTouchScreen, process_event_ignores_excessive_touch_events_on_coordinate_0_0)
+{
+    MirTouchId slot1 = 0, slot2 = 1;
+    float major = 0;
+    float minor = 0;
+    float pressure = 0.0f;
+    float x = 0;
+    float y = 0;
+    float orientation = 0;
+
+    InSequence seq;
+    EXPECT_CALL(mock_builder, touch_event(_, _)).Times(0);
+    EXPECT_CALL(mock_sink, handle_input(_)).Times(0);
+
+    touch_screen.start(&mock_sink, &mock_builder);
+    env.mock_libinput.setup_touch_event(fake_device, LIBINPUT_EVENT_TOUCH_DOWN, event_time_1, slot1, x, y, major, minor,
+                                        pressure, orientation);
+    env.mock_libinput.setup_touch_up_event(fake_device, event_time_1, slot1);
+    env.mock_libinput.setup_touch_event(fake_device, LIBINPUT_EVENT_TOUCH_DOWN, event_time_1, slot2, x, y, major, minor,
+                                        pressure, orientation);
+    env.mock_libinput.setup_touch_up_event(fake_device, event_time_1, slot2);
+    env.mock_libinput.setup_touch_frame(fake_device, event_time_1);
+    process_events(touch_screen);
+}
+
 TEST_F(LibInputDeviceOnTouchScreen, process_event_handles_touch_move_events)
 {
     MirTouchId slot = 0;

From e662437e9e1b2c5db8f8375dac6c6f0844690517 Mon Sep 17 00:00:00 2001
From: Florian Leeber <florian@ubports.com>
Date: Tue, 1 Feb 2022 21:00:14 +0100
Subject: [PATCH 2/4] Review comments

---
 src/platforms/evdev/libinput_device.cpp | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/src/platforms/evdev/libinput_device.cpp b/src/platforms/evdev/libinput_device.cpp
index 3866a4ac3c..ed8dd9e4cd 100644
--- a/src/platforms/evdev/libinput_device.cpp
+++ b/src/platforms/evdev/libinput_device.cpp
@@ -345,11 +345,11 @@ mir::EventUPtr mie::LibInputDevice::convert_touch_frame(libinput_event_touch* to
     // to (0, 0) coordinates. Detect those and drop the whole frame in this case.
     // Also drop touch frames with no contacts inside
     int emptyTouches = 0;
-    for_each(begin(contacts), end(contacts), [&](auto const& contact)
+    for (const auto &contact: contacts)
     {
         if (contact.x == 0 && contact.y == 0)
             emptyTouches++;
-    });
+    }
     if (contacts.empty() || emptyTouches > 1)
         return {nullptr, [](auto){}};
     
@@ -371,7 +371,7 @@ void mie::LibInputDevice::handle_touch_up(libinput_event_touch* touch)
     //create a fake action.
     auto const it = last_seen_properties.find(id);
     if (it != end(last_seen_properties))
-        (*it).second.action = mir_touch_action_up;
+        it->second.action = mir_touch_action_up;
 }
 
 void mie::LibInputDevice::update_contact_data(ContactData & data, MirTouchAction action, libinput_event_touch* touch)

From 295215431ad24ccde08c64e80dfddab76a6db287 Mon Sep 17 00:00:00 2001
From: Florian Leeber <florian@ubports.com>
Date: Tue, 1 Feb 2022 21:00:38 +0100
Subject: [PATCH 3/4] Review comments for tests

---
 .../input/evdev/test_libinput_device.cpp      | 35 ++++++++++++++++++-
 1 file changed, 34 insertions(+), 1 deletion(-)

diff --git a/tests/unit-tests/input/evdev/test_libinput_device.cpp b/tests/unit-tests/input/evdev/test_libinput_device.cpp
index 58ec64781c..e131a106e5 100644
--- a/tests/unit-tests/input/evdev/test_libinput_device.cpp
+++ b/tests/unit-tests/input/evdev/test_libinput_device.cpp
@@ -562,7 +562,7 @@ TEST_F(LibInputDeviceOnTouchScreen, process_event_ignores_uncorrelated_touch_up_
 
 TEST_F(LibInputDeviceOnTouchScreen, process_event_ignores_excessive_touch_events_on_coordinate_0_0)
 {
-    MirTouchId slot1 = 0, slot2 = 1;
+    MirTouchId slot1 = 0, slot2 = 1, slot3 = 2;
     float major = 0;
     float minor = 0;
     float pressure = 0.0f;
@@ -575,12 +575,45 @@ TEST_F(LibInputDeviceOnTouchScreen, process_event_ignores_excessive_touch_events
     EXPECT_CALL(mock_sink, handle_input(_)).Times(0);
 
     touch_screen.start(&mock_sink, &mock_builder);
+
+    //Add 2 touches on coordinate 0,0 - this should be detected as a spurious touch
     env.mock_libinput.setup_touch_event(fake_device, LIBINPUT_EVENT_TOUCH_DOWN, event_time_1, slot1, x, y, major, minor,
                                         pressure, orientation);
     env.mock_libinput.setup_touch_up_event(fake_device, event_time_1, slot1);
     env.mock_libinput.setup_touch_event(fake_device, LIBINPUT_EVENT_TOUCH_DOWN, event_time_1, slot2, x, y, major, minor,
                                         pressure, orientation);
     env.mock_libinput.setup_touch_up_event(fake_device, event_time_1, slot2);
+
+    //Add another valid touch down event to make sure the frame is really not processed
+    env.mock_libinput.setup_touch_event(fake_device, LIBINPUT_EVENT_TOUCH_DOWN, event_time_1, slot3, 1, 1, major, minor,
+                                        pressure, orientation);
+    env.mock_libinput.setup_touch_up_event(fake_device, event_time_1, slot3);
+
+    env.mock_libinput.setup_touch_frame(fake_device, event_time_1);
+    process_events(touch_screen);
+}
+
+TEST_F(LibInputDeviceOnTouchScreen, process_event_does_not_ignore_valid_touch_events_on_coordinate_0_0)
+{
+    MirTouchId slot1 = 0, slot2 = 1;
+    float major = 0;
+    float minor = 0;
+    float pressure = 0.0f;
+    float x = 0;
+    float y = 0;
+    float orientation = 0;
+
+    InSequence seq;
+    EXPECT_CALL(mock_builder, touch_event(_, _)).Times(0);
+    EXPECT_CALL(mock_sink, handle_input(_)).Times(0);
+
+    touch_screen.start(&mock_sink, &mock_builder);
+    env.mock_libinput.setup_touch_event(fake_device, LIBINPUT_EVENT_TOUCH_DOWN, event_time_1, slot1, x, y, major, minor,
+                                        pressure, orientation);
+    env.mock_libinput.setup_touch_up_event(fake_device, event_time_1, slot1);
+    env.mock_libinput.setup_touch_event(fake_device, LIBINPUT_EVENT_TOUCH_DOWN, event_time_1, slot2, 1, 1, major, minor,
+                                        pressure, orientation);
+    env.mock_libinput.setup_touch_up_event(fake_device, event_time_1, slot2);
     env.mock_libinput.setup_touch_frame(fake_device, event_time_1);
     process_events(touch_screen);
 }

From 1183dafe7771701e4771e255a0bfdd632bb498e6 Mon Sep 17 00:00:00 2001
From: Florian Leeber <florian@ubports.com>
Date: Tue, 1 Feb 2022 21:20:21 +0100
Subject: [PATCH 4/4] Fix unit test (after checking it really failed)

---
 tests/unit-tests/input/evdev/test_libinput_device.cpp | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/tests/unit-tests/input/evdev/test_libinput_device.cpp b/tests/unit-tests/input/evdev/test_libinput_device.cpp
index e131a106e5..b293a582d5 100644
--- a/tests/unit-tests/input/evdev/test_libinput_device.cpp
+++ b/tests/unit-tests/input/evdev/test_libinput_device.cpp
@@ -604,8 +604,8 @@ TEST_F(LibInputDeviceOnTouchScreen, process_event_does_not_ignore_valid_touch_ev
     float orientation = 0;
 
     InSequence seq;
-    EXPECT_CALL(mock_builder, touch_event(_, _)).Times(0);
-    EXPECT_CALL(mock_sink, handle_input(_)).Times(0);
+    EXPECT_CALL(mock_builder, touch_event(_, _)).Times(1);
+    EXPECT_CALL(mock_sink, handle_input(_)).Times(1);
 
     touch_screen.start(&mock_sink, &mock_builder);
     env.mock_libinput.setup_touch_event(fake_device, LIBINPUT_EVENT_TOUCH_DOWN, event_time_1, slot1, x, y, major, minor,
