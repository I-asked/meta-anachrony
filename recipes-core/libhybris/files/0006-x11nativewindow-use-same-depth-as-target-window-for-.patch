From 4188ffe22600bc819855ab271f7a2af9d8327903 Mon Sep 17 00:00:00 2001
From: NeKit <nekit1000@gmail.com>
Date: Wed, 21 Feb 2018 22:31:17 +0300
Subject: [PATCH 06/10] x11nativewindow: use same depth as target window for
 pixmap

Call xcb_present_pixmap instead of xcb_copy_area to present pixmap
---
 hybris/egl/platforms/x11/x11_window.cpp | 46 ++++++++++++++++---------
 hybris/egl/platforms/x11/x11_window.h   |  7 +++-
 2 files changed, 36 insertions(+), 17 deletions(-)

diff --git a/hybris/egl/platforms/x11/x11_window.cpp b/hybris/egl/platforms/x11/x11_window.cpp
index 6c7be45..6c88e14 100644
--- a/hybris/egl/platforms/x11/x11_window.cpp
+++ b/hybris/egl/platforms/x11/x11_window.cpp
@@ -44,8 +44,8 @@ extern "C" {
 void X11NativeWindow::resize(unsigned int width, unsigned int height)
 {
     lock();
-    this->m_defaultWidth = width;
-    this->m_defaultHeight = height;
+    this->m_defaultWidth = this->m_width = width;
+    this->m_defaultHeight = this->m_height = height;
     unlock();
 }
 
@@ -94,6 +94,7 @@ X11NativeWindow::X11NativeWindow(Display* xl_display, Window xl_window, alloc_de
 
     m_width = window_attributes.width;
     m_height = window_attributes.height;
+    m_depth = window_attributes.depth;
 
     const char *env = getenv("HYBRIS_X11_FORCE_WIDTH");
     if (env != NULL)
@@ -299,6 +300,7 @@ void X11NativeWindow::prepareSwap(EGLint *damage_rects, EGLint damage_n_rects)
 
 void X11NativeWindow::finishSwap()
 {
+    static int serial = 0;
     int ret = 0;
     lock();
 
@@ -312,7 +314,7 @@ void X11NativeWindow::finishSwap()
     m_lastBuffer = wnb;
     wnb->busy = 1;
 
-    fronted.push_back(wnb);
+    // fronted.push_back(wnb);
 
     m_damage_rects = NULL;
     m_damage_n_rects = 0;
@@ -322,9 +324,21 @@ void X11NativeWindow::finishSwap()
         if (wnb->pixmap == 0)
             wnb->pixmap_from_buffer(m_connection, m_window);
 
-        xcb_copy_area(m_connection, wnb->pixmap, m_window, m_xcb_gc,
-                        0, 0, 0, 0, /* src_x, src_y, dst_x, dst_y */
-                        m_width, m_height);
+        xcb_present_pixmap(m_connection,
+                            m_window,
+                            wnb->pixmap,
+                            (uint32_t) serial++,
+                            0,                                    /* valid */
+                            0,                                    /* update */
+                            0,                                    /* x_off */
+                            0,                                    /* y_off */
+                            None,                                 /* target_crtc */
+                            None,
+                            NULL,
+                            XCB_PRESENT_OPTION_NONE,
+                            0,
+                            0,
+                            0, 0, NULL);
         xcb_flush(m_connection);
 
         lock();
@@ -481,14 +495,14 @@ unsigned int X11NativeWindow::getUsage() const {
 }
 
 int X11NativeWindow::setBuffersFormat(int format) {
-//     if (format != m_format)
-//     {
-//         TRACE("old-format:x%x new-format:x%x", m_format, format);
-//         m_format = format;
-//         /* Buffers will be re-allocated when dequeued */
-//     } else {
-//         TRACE("format:x%x", format);
-//     }
+    if (format != m_format)
+    {
+        TRACE("old-format:x%x new-format:x%x", m_format, format);
+        m_format = format;
+        /* Buffers will be re-allocated when dequeued */
+    } else {
+        TRACE("format:x%x", format);
+    }
     return NO_ERROR;
 }
 
@@ -522,7 +536,7 @@ X11NativeWindowBuffer *X11NativeWindow::addBuffer() {
 
     X11NativeWindowBuffer *wnb;
 
-    wnb = new ClientX11Buffer(m_alloc, m_width, m_height, m_format, m_usage);
+    wnb = new ClientX11Buffer(m_alloc, m_width, m_height, m_format, m_usage, m_depth);
     m_bufList.push_back(wnb);
     ++m_freeBufs;
 
@@ -717,7 +731,7 @@ void X11NativeWindowBuffer::pixmap_from_buffer(xcb_connection_t *connection, xcb
                                drawable,
                                stride * height * 4,
                                this->width, height, stride,
-                               32, 32,
+                               windowDepth, 32,
                                handle->numInts,
                                handle->numFds,
                                (const uint32_t *)(handle->data + handle->numFds),
diff --git a/hybris/egl/platforms/x11/x11_window.h b/hybris/egl/platforms/x11/x11_window.h
index cceaee5..e5be070 100644
--- a/hybris/egl/platforms/x11/x11_window.h
+++ b/hybris/egl/platforms/x11/x11_window.h
@@ -61,6 +61,7 @@ public:
     int busy;
     int youngest;
     ANativeWindowBuffer *other;
+    int windowDepth;
     xcb_pixmap_t pixmap;
 
     void pixmap_from_buffer(xcb_connection_t *connection, xcb_drawable_t drawable);
@@ -78,7 +79,8 @@ protected:
                             unsigned int width,
                             unsigned int height,
                             unsigned int format,
-                            unsigned int usage)
+                            unsigned int usage,
+                            unsigned int windowDepth)
     {
         // Base members
         ANativeWindowBuffer::width = width;
@@ -96,6 +98,8 @@ protected:
         assert(alloc_ok == 0);
         this->youngest = 0;
         this->common.incRef(&this->common);
+
+        this->windowDepth = windowDepth;
         this->pixmap = 0;
     }
 
@@ -182,6 +186,7 @@ private:
     X11NativeWindowBuffer *m_lastBuffer;
     unsigned int m_width;
     unsigned int m_height;
+    unsigned int m_depth;
     unsigned int m_format;
     unsigned int m_defaultWidth;
     unsigned int m_defaultHeight;
-- 
2.44.0

