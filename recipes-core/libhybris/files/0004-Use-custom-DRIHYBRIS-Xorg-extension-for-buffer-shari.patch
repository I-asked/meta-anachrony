From 453cc4a66d1b974d2cf8e94f1405995dbcd2cf85 Mon Sep 17 00:00:00 2001
From: NeKit <nekit1000@gmail.com>
Date: Tue, 28 Nov 2017 22:33:04 +0300
Subject: [PATCH 04/10] Use custom DRIHYBRIS Xorg extension for buffer sharing
 to Xorg/glamor when possible

Gives huge speedup over XShmPutImage, but requires patched Glamor and DDX driver
to utilize it
---
 hybris/egl/platforms/x11/Makefile.am     |   4 +-
 hybris/egl/platforms/x11/x11_window.cpp  |  76 +++++++++--
 hybris/egl/platforms/x11/x11_window.h    |  20 +--
 hybris/egl/platforms/x11/xcb_drihybris.c | 167 +++++++++++++++++++++++
 hybris/egl/platforms/x11/xcb_drihybris.h | 122 +++++++++++++++++
 5 files changed, 370 insertions(+), 19 deletions(-)
 create mode 100644 hybris/egl/platforms/x11/xcb_drihybris.c
 create mode 100644 hybris/egl/platforms/x11/xcb_drihybris.h

diff --git a/hybris/egl/platforms/x11/Makefile.am b/hybris/egl/platforms/x11/Makefile.am
index 334ccb3..0540ca5 100644
--- a/hybris/egl/platforms/x11/Makefile.am
+++ b/hybris/egl/platforms/x11/Makefile.am
@@ -1,6 +1,6 @@
 pkglib_LTLIBRARIES = eglplatform_x11.la
 
-eglplatform_x11_la_SOURCES = eglplatform_x11.cpp x11_window.cpp
+eglplatform_x11_la_SOURCES = eglplatform_x11.cpp x11_window.cpp xcb_drihybris.c
 eglplatform_x11_la_CXXFLAGS = \
 	-I$(top_srcdir)/common \
 	-I$(top_srcdir)/include \
@@ -31,7 +31,7 @@ eglplatform_x11_la_LDFLAGS = \
 	-avoid-version -module -shared -export-dynamic \
 	$(top_builddir)/egl/platforms/common/libhybris-eglplatformcommon.la \
 	$(top_builddir)/hardware/libhardware.la \
-	-lX11 -lXext
+	-lXext -lxcb -lX11-xcb
 
 if HAS_ANDROID_4_2_0
 eglplatform_x11_la_LDFLAGS += $(top_builddir)/libsync/libsync.la
diff --git a/hybris/egl/platforms/x11/x11_window.cpp b/hybris/egl/platforms/x11/x11_window.cpp
index 899e648..f585dce 100644
--- a/hybris/egl/platforms/x11/x11_window.cpp
+++ b/hybris/egl/platforms/x11/x11_window.cpp
@@ -33,6 +33,7 @@
 
 #include "logging.h"
 #include <eglhybris.h>
+#include "xcb_drihybris.h"
 
 #if ANDROID_VERSION_MAJOR>=4 && ANDROID_VERSION_MINOR>=2 || ANDROID_VERSION_MAJOR>=5
 extern "C" {
@@ -65,6 +66,7 @@ X11NativeWindow::X11NativeWindow(Display* xl_display, Window xl_window, alloc_de
     HYBRIS_TRACE_BEGIN("x11-platform", "create_window", "");
     this->m_window = xl_window;
     this->m_display = xl_display;
+    this->m_connection = XGetXCBConnection(xl_display);
     this->m_image = 0;
     this->m_useShm = true;
     this->m_format = HAL_PIXEL_FORMAT_BGRA_8888;
@@ -120,6 +122,12 @@ X11NativeWindow::X11NativeWindow(Display* xl_display, Window xl_window, alloc_de
     XGCValues gcvalues;
     m_gc = XCreateGC(m_display, m_window, 0, &gcvalues);
 
+    m_xcb_gc = xcb_generate_id(m_connection);
+    xcb_create_gc(m_connection, m_xcb_gc, m_window, 0, 0);
+
+    m_haveDRIHybris = false;
+    tryEnableDRIHybris();
+
     m_usage=GRALLOC_USAGE_HW_RENDER | GRALLOC_USAGE_HW_TEXTURE | GRALLOC_USAGE_SW_READ_OFTEN;
     pthread_mutex_init(&mutex, NULL);
     pthread_cond_init(&cond, NULL);
@@ -306,7 +314,32 @@ void X11NativeWindow::finishSwap()
     m_damage_n_rects = 0;
     unlock();
 
-    copyToX11(wnb);
+    if (m_haveDRIHybris) {
+        if (wnb->pixmap == 0)
+            wnb->pixmap_from_buffer(m_connection, m_window);
+
+        xcb_copy_area(m_connection, wnb->pixmap, m_window, m_xcb_gc,
+                        0, 0, 0, 0, /* src_x, src_y, dst_x, dst_y */
+                        m_width, m_height);
+        xcb_flush(m_connection);
+
+        lock();
+
+        ++m_freeBufs;
+        HYBRIS_TRACE_COUNTER("x11-platform", "m_freeBufs", "%i", m_freeBufs);
+
+        std::list<X11NativeWindowBuffer *>::iterator it;
+        for (it = m_bufList.begin(); it != m_bufList.end(); it++)
+        {
+            (*it)->youngest = 0;
+        }
+        wnb->youngest = 1;
+        wnb->busy = 0;
+
+        unlock();
+    } else {
+        copyToX11(wnb);
+    }
 }
 
 static int debugenvchecked = 0;
@@ -495,7 +528,6 @@ X11NativeWindowBuffer *X11NativeWindow::addBuffer() {
     return wnb;
 }
 
-
 int X11NativeWindow::setBufferCount(int cnt) {
     int start = 0;
 
@@ -528,9 +560,6 @@ int X11NativeWindow::setBufferCount(int cnt) {
     return NO_ERROR;
 }
 
-
-
-
 int X11NativeWindow::setBuffersDimensions(int width, int height) {
     if (m_width != width || m_height != height)
     {
@@ -623,10 +652,41 @@ void X11NativeWindow::copyToX11(X11NativeWindowBuffer *wnb) {
     unlock();
 }
 
-void ClientX11Buffer::init(struct android_wlegl *android_wlegl,
-                                    struct wl_display *display,
-                                    struct wl_event_queue *queue)
+void X11NativeWindow::tryEnableDRIHybris()
+{
+   const xcb_query_extension_reply_t *extension;
+
+   xcb_prefetch_extension_data (m_connection, &xcb_drihybris_id);
+
+   extension = xcb_get_extension_data(m_connection, &xcb_drihybris_id);
+   if (!(extension && extension->present))
+      return;
+
+   m_haveDRIHybris = true;
+   // HYBRIS_PIXEL_FORMAT_RGBA_8888 is used in glamor for buffer import
+   m_format = HAL_PIXEL_FORMAT_RGBA_8888;
+}
+
+void X11NativeWindowBuffer::pixmap_from_buffer(xcb_connection_t *connection, xcb_drawable_t drawable)
 {
+    int32_t * fds;
+    fds = (int32_t *)calloc(handle->numFds, sizeof(int));
+    for (int i = 0; i < handle->numFds; i++) {
+        fds[i] = dup(handle->data[i]);
+    }
+
+    xcb_drihybris_pixmap_from_buffer_checked(connection,
+                               (pixmap = xcb_generate_id(connection)),
+                               drawable,
+                               stride * height * 4,
+                               this->width, height, stride,
+                               32, 32,
+                               handle->numInts,
+                               handle->numFds,
+                               (const uint32_t *)(handle->data + handle->numFds),
+                               (const int32_t *)fds);
+    xcb_flush(connection);
+    free(fds);
 }
 
 // vim: noai:ts=4:sw=4:ss=4:expandtab
diff --git a/hybris/egl/platforms/x11/x11_window.h b/hybris/egl/platforms/x11/x11_window.h
index b719fb1..0385154 100644
--- a/hybris/egl/platforms/x11/x11_window.h
+++ b/hybris/egl/platforms/x11/x11_window.h
@@ -30,7 +30,7 @@
 #include <linux/fb.h>
 #include <hardware/gralloc.h>
 extern "C" {
-#include <X11/Xlib.h>
+#include <X11/Xlib-xcb.h>
 #include <sys/shm.h>
 #include <X11/extensions/XShm.h>
 #include <pthread.h>
@@ -54,15 +54,15 @@ public:
         this->busy = 0;
         this->other = other;
         this->youngest = 0;
+        this->pixmap = 0;
     }
 
     int busy;
     int youngest;
     ANativeWindowBuffer *other;
+    xcb_pixmap_t pixmap;
 
-    virtual void init(struct android_wlegl *android_wlegl,
-                    struct wl_display *display,
-                    struct wl_event_queue *queue) {}
+    void pixmap_from_buffer(xcb_connection_t *connection, xcb_drawable_t drawable);
 };
 
 class ClientX11Buffer : public X11NativeWindowBuffer
@@ -95,6 +95,7 @@ protected:
         assert(alloc_ok == 0);
         this->youngest = 0;
         this->common.incRef(&this->common);
+        this->pixmap = 0;
     }
 
     ~ClientX11Buffer()
@@ -103,10 +104,6 @@ protected:
             m_alloc->free(m_alloc, this->handle);
     }
 
-    void init(struct android_wlegl *android_wlegl,
-                                    struct wl_display *display,
-                                    struct wl_event_queue *queue);
-
 protected:
     void* vaddr;
     alloc_device_t* m_alloc;
@@ -129,7 +126,6 @@ public:
     virtual int setSwapInterval(int interval);
     void prepareSwap(EGLint *damage_rects, EGLint damage_n_rects);
     void finishSwap();
-    void copyToX11(X11NativeWindowBuffer *wnb);
 
 protected:
     // overloads from BaseNativeWindow
@@ -158,6 +154,9 @@ private:
     void destroyBuffers();
     int readQueue(bool block);
 
+    void copyToX11(X11NativeWindowBuffer *wnb);
+    void tryEnableDRIHybris();
+
     std::list<X11NativeWindowBuffer *> m_bufList;
     std::list<X11NativeWindowBuffer *> fronted;
     std::list<X11NativeWindowBuffer *> posted;
@@ -169,7 +168,10 @@ private:
     XImage *m_image;
     XShmSegmentInfo m_shminfo;
     GC m_gc;
+    xcb_connection_t *m_connection;
+    xcb_gcontext_t m_xcb_gc;
     bool m_useShm;
+    bool m_haveDRIHybris;
     
     X11NativeWindowBuffer *m_lastBuffer;
     unsigned int m_width;
diff --git a/hybris/egl/platforms/x11/xcb_drihybris.c b/hybris/egl/platforms/x11/xcb_drihybris.c
new file mode 100644
index 0000000..bec3722
--- /dev/null
+++ b/hybris/egl/platforms/x11/xcb_drihybris.c
@@ -0,0 +1,167 @@
+/*
+ * This file generated automatically from drihybris.xml by c_client.py.
+ * Edit at your peril.
+ */
+
+#include "xcb_drihybris.h"
+#include <stddef.h>  /* for offsetof() */
+
+xcb_extension_t xcb_drihybris_id = { "DRIHYBRIS", 0 };
+
+#define ALIGNOF(type) offsetof(struct { char dummy; type member; }, member)
+
+int
+xcb_drihybris_pixmap_from_buffer_sizeof (const void  *_buffer,
+                                         int32_t      pixmap_fd)
+{
+    char *xcb_tmp = (char *)_buffer;
+    const xcb_drihybris_pixmap_from_buffer_request_t *_aux = (xcb_drihybris_pixmap_from_buffer_request_t *)_buffer;
+    unsigned int xcb_buffer_len = 0;
+    unsigned int xcb_block_len = 0;
+    unsigned int xcb_pad = 0;
+    unsigned int xcb_align_to = 0;
+
+
+    xcb_block_len += sizeof(xcb_drihybris_pixmap_from_buffer_request_t);
+    xcb_tmp += xcb_block_len;
+    xcb_buffer_len += xcb_block_len;
+    xcb_block_len = 0;
+    /* ints */
+    xcb_block_len += _aux->num_ints * sizeof(uint32_t);
+    xcb_tmp += xcb_block_len;
+    xcb_align_to = ALIGNOF(uint32_t);
+    /* insert padding */
+    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
+    xcb_buffer_len += xcb_block_len + xcb_pad;
+    if (0 != xcb_pad) {
+        xcb_tmp += xcb_pad;
+        xcb_pad = 0;
+    }
+    xcb_block_len = 0;
+
+    return xcb_buffer_len;
+}
+
+xcb_void_cookie_t
+xcb_drihybris_pixmap_from_buffer_checked (xcb_connection_t *c,
+                                          xcb_pixmap_t      pixmap,
+                                          xcb_drawable_t    drawable,
+                                          uint32_t          size,
+                                          uint16_t          width,
+                                          uint16_t          height,
+                                          uint16_t          stride,
+                                          uint8_t           depth,
+                                          uint8_t           bpp,
+                                          uint16_t          num_ints,
+                                          uint16_t          num_fds,
+                                          const uint32_t   *ints,
+                                          const int32_t    *fds)
+{
+    static const xcb_protocol_request_t xcb_req = {
+        .count = 4,
+        .ext = &xcb_drihybris_id,
+        .opcode = XCB_DRIHYBRIS_PIXMAP_FROM_BUFFER,
+        .isvoid = 1
+    };
+
+    struct iovec xcb_parts[6];
+    xcb_void_cookie_t xcb_ret;
+    xcb_drihybris_pixmap_from_buffer_request_t xcb_out;
+
+    xcb_out.pixmap = pixmap;
+    xcb_out.drawable = drawable;
+    xcb_out.size = size;
+    xcb_out.width = width;
+    xcb_out.height = height;
+    xcb_out.stride = stride;
+    xcb_out.depth = depth;
+    xcb_out.bpp = bpp;
+    xcb_out.num_ints = num_ints;
+    xcb_out.num_fds = num_fds;
+
+    xcb_parts[2].iov_base = (char *) &xcb_out;
+    xcb_parts[2].iov_len = sizeof(xcb_out);
+    xcb_parts[3].iov_base = 0;
+    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
+    /* uint32_t ints */
+    xcb_parts[4].iov_base = (char *) ints;
+    xcb_parts[4].iov_len = num_ints * sizeof(uint32_t);
+    xcb_parts[5].iov_base = 0;
+    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;
+
+    xcb_ret.sequence = xcb_send_request_with_fds(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req, num_fds, fds);
+    return xcb_ret;
+}
+
+xcb_void_cookie_t
+xcb_drihybris_pixmap_from_buffer (xcb_connection_t *c,
+                                  xcb_pixmap_t      pixmap,
+                                  xcb_drawable_t    drawable,
+                                  uint32_t          size,
+                                  uint16_t          width,
+                                  uint16_t          height,
+                                  uint16_t          stride,
+                                  uint8_t           depth,
+                                  uint8_t           bpp,
+                                  uint16_t          num_ints,
+                                  uint16_t          num_fds,
+                                  const uint32_t   *ints,
+                                  const int32_t    *fds)
+{
+    static const xcb_protocol_request_t xcb_req = {
+        .count = 4,
+        .ext = &xcb_drihybris_id,
+        .opcode = XCB_DRIHYBRIS_PIXMAP_FROM_BUFFER,
+        .isvoid = 1
+    };
+
+    struct iovec xcb_parts[6];
+    xcb_void_cookie_t xcb_ret;
+    xcb_drihybris_pixmap_from_buffer_request_t xcb_out;
+
+    xcb_out.pixmap = pixmap;
+    xcb_out.drawable = drawable;
+    xcb_out.size = size;
+    xcb_out.width = width;
+    xcb_out.height = height;
+    xcb_out.stride = stride;
+    xcb_out.depth = depth;
+    xcb_out.bpp = bpp;
+    xcb_out.num_ints = num_ints;
+    xcb_out.num_fds = num_fds;
+
+    xcb_parts[2].iov_base = (char *) &xcb_out;
+    xcb_parts[2].iov_len = sizeof(xcb_out);
+    xcb_parts[3].iov_base = 0;
+    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
+    /* uint32_t ints */
+    xcb_parts[4].iov_base = (char *) ints;
+    xcb_parts[4].iov_len = num_ints * sizeof(uint32_t);
+    xcb_parts[5].iov_base = 0;
+    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;
+
+    xcb_ret.sequence = xcb_send_request_with_fds(c, 0, xcb_parts + 2, &xcb_req, num_fds, fds);
+    return xcb_ret;
+}
+
+uint32_t *
+xcb_drihybris_pixmap_from_buffer_ints (const xcb_drihybris_pixmap_from_buffer_request_t *R)
+{
+    return (uint32_t *) (R + 1);
+}
+
+int
+xcb_drihybris_pixmap_from_buffer_ints_length (const xcb_drihybris_pixmap_from_buffer_request_t *R)
+{
+    return R->num_ints;
+}
+
+xcb_generic_iterator_t
+xcb_drihybris_pixmap_from_buffer_ints_end (const xcb_drihybris_pixmap_from_buffer_request_t *R)
+{
+    xcb_generic_iterator_t i;
+    i.data = ((uint32_t *) (R + 1)) + (R->num_ints);
+    i.rem = 0;
+    i.index = (char *) i.data - (char *) R;
+    return i;
+}
diff --git a/hybris/egl/platforms/x11/xcb_drihybris.h b/hybris/egl/platforms/x11/xcb_drihybris.h
new file mode 100644
index 0000000..0ffdb8b
--- /dev/null
+++ b/hybris/egl/platforms/x11/xcb_drihybris.h
@@ -0,0 +1,122 @@
+/*
+ * This file generated automatically from drihybris.xml by c_client.py.
+ * Edit at your peril.
+ */
+
+/**
+ * @defgroup XCB_DRIHYBRIS_API XCB DRIHYBRIS API
+ * @brief DRIHYBRIS XCB Protocol Implementation.
+ * @{
+ **/
+
+#ifndef DRIHYBRIS_PROTO_H
+#define DRIHYBRIS_PROTO_H
+
+#include <xcb/xcb.h>
+#include <xcb/xcbext.h>
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+#define XCB_DRIHYBRIS_MAJOR_VERSION 1
+#define XCB_DRIHYBRIS_MINOR_VERSION 0
+
+extern xcb_extension_t xcb_drihybris_id;
+
+/** Opcode for xcb_drihybris_pixmap_from_buffer. */
+#define XCB_DRIHYBRIS_PIXMAP_FROM_BUFFER 2
+
+/**
+ * @brief xcb_drihybris_pixmap_from_buffer_request_t
+ **/
+typedef struct xcb_drihybris_pixmap_from_buffer_request_t {
+    uint8_t        major_opcode;
+    uint8_t        minor_opcode;
+    uint16_t       length;
+    xcb_pixmap_t   pixmap;
+    xcb_drawable_t drawable;
+    uint32_t       size;
+    uint16_t       width;
+    uint16_t       height;
+    uint16_t       stride;
+    uint8_t        depth;
+    uint8_t        bpp;
+    uint16_t       num_ints;
+    uint16_t       num_fds;
+} xcb_drihybris_pixmap_from_buffer_request_t;
+
+/**
+ * @brief xcb_drihybris_buffer_from_pixmap_cookie_t
+ **/
+typedef struct xcb_drihybris_buffer_from_pixmap_cookie_t {
+    unsigned int sequence;
+} xcb_drihybris_buffer_from_pixmap_cookie_t;
+
+int
+xcb_drihybris_pixmap_from_buffer_sizeof (const void  *_buffer,
+                                         int32_t      pixmap_fd);
+
+/**
+ *
+ * @param c The connection
+ * @return A cookie
+ *
+ * Delivers a request to the X server.
+ *
+ * This form can be used only if the request will not cause
+ * a reply to be generated. Any returned error will be
+ * saved for handling by xcb_request_check().
+ */
+xcb_void_cookie_t
+xcb_drihybris_pixmap_from_buffer_checked (xcb_connection_t *c,
+                                          xcb_pixmap_t      pixmap,
+                                          xcb_drawable_t    drawable,
+                                          uint32_t          size,
+                                          uint16_t          width,
+                                          uint16_t          height,
+                                          uint16_t          stride,
+                                          uint8_t           depth,
+                                          uint8_t           bpp,
+                                          uint16_t          num_ints,
+                                          uint16_t          num_fds,
+                                          const uint32_t   *ints,
+                                          const int32_t    *fds);
+
+/**
+ *
+ * @param c The connection
+ * @return A cookie
+ *
+ * Delivers a request to the X server.
+ *
+ */
+xcb_void_cookie_t
+xcb_drihybris_pixmap_from_buffer (xcb_connection_t *c,
+                                  xcb_pixmap_t      pixmap,
+                                  xcb_drawable_t    drawable,
+                                  uint32_t          size,
+                                  uint16_t          width,
+                                  uint16_t          height,
+                                  uint16_t          stride,
+                                  uint8_t           depth,
+                                  uint8_t           bpp,
+                                  uint16_t          num_ints,
+                                  uint16_t          num_fds,
+                                  const uint32_t   *ints,
+                                  const int32_t    *fds);
+
+uint32_t *
+xcb_drihybris_pixmap_from_buffer_ints (const xcb_drihybris_pixmap_from_buffer_request_t *R);
+
+int
+xcb_drihybris_pixmap_from_buffer_ints_length (const xcb_drihybris_pixmap_from_buffer_request_t *R);
+
+xcb_generic_iterator_t
+xcb_drihybris_pixmap_from_buffer_ints_end (const xcb_drihybris_pixmap_from_buffer_request_t *R);
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif //DRIHYBRIS_PROTO_H
-- 
2.44.0

